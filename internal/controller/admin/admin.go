// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package admin

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/crypto/gmd5"
	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/os/gctx"
	"github.com/gogf/gf/v2/util/gconv"
	"gohub/api/user/v1"
	"gohub/internal/consts"
	"gohub/internal/model/entity"
	"gohub/internal/service"
	"gohub/utility/errUtils"
	"gohub/utility/utils"
)

// 统一获取配置项
var (
	ctx            = gctx.New()
	cacheKeyPrefix = utils.GetConfig(ctx, "verifyCode.cacheKeyPrefix")
	multiLogin     = utils.GetConfigBool(ctx, "sSysLoginLog.multiLogin")
)

func checkVerifyCode(ctx context.Context, key, code string) (err error) {
	cache := service.Cache().GetCache()
	// 判断验证码是否正确
	var verifyCode *gvar.Var
	cacheKey := fmt.Sprintf("%s%s", cacheKeyPrefix, key)
	verifyCode, err = cache.Get(ctx, cacheKey)
	errUtils.ErrIfNotNil(ctx, err, consts.InternalServerError)
	if verifyCode == nil {
		err = gerror.NewCode(gcode.CodeInvalidParameter, "验证码已过期")
		return
	}
	if verifyCode.String() != code {
		err = gerror.NewCode(gcode.CodeInvalidParameter, "验证码输入错误")
		return
	}
	// 删除已验证的验证码
	_, err = cache.Remove(ctx, cacheKey)
	errUtils.ErrIfNotNil(ctx, err, consts.InternalServerError)
	return
}

func LoginCommon(ctx context.Context, key, verifyCode, loginType string) (err error, loginRes *v1.LoginResCommon) {
	var (
		user  *entity.SysUser
		token string
	)
	//判断验证码是否正确
	err = checkVerifyCode(ctx, key, verifyCode)
	if err != nil {
		return
	}
	ip := utils.GetClientIp(ctx)
	userAgent := utils.GetUserAgent(ctx)
	user, err = service.SysUser().GetUserByUniqueKey(ctx, key)
	if err != nil {
		// 保存登录失败的日志信息
		service.SysLoginLog().Invoke(gctx.New(), loginType, loginType, err.Error(), 0)
		return
	}
	err = service.SysUser().UpdateLoginInfo(ctx, user.Id, ip)
	if err != nil {
		return
	}
	// 保存登录成功的日志信息
	service.SysLoginLog().Invoke(gctx.New(), loginType, loginType, "登录成功", 1)
	tokenKey := gconv.String(user.Id) + "-" + gmd5.MustEncryptString(user.UserName) + gmd5.MustEncryptString(user.UserPassword)
	if multiLogin {
		tokenKey = gconv.String(user.Id) + "-" + gmd5.MustEncryptString(user.UserName) + gmd5.MustEncryptString(user.UserPassword+ip+userAgent)
	}
	user.UserPassword = ""
	token, err = service.GhToken().GenerateToken(ctx, tokenKey, user)
	if err != nil {
		g.Log().Error(ctx, err)
		err = gerror.New("登录失败，后端服务出现错误")
		return
	}
	//获取用户数据
	loginRes = &v1.LoginResCommon{
		UserInfo: user,
		Token:    token,
	}
	return
}
